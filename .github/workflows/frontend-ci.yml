name: Frontend CI
run-name: ${{ github.actor }}Í∞Ä Ïã§ÌñâÌï®
on: 
  pull_request:
    branches:
      - develop
    paths:
      - 'frontend/**'
      - './github/workflows/frontend-ci.yml'
      - './github/workflows/slack-notification.yml'
    
jobs:
  CI:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './frontend'
    outputs:
      status: ${{ job.status }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      
      - name: nodeJS
        uses: actions/setup-node@v3
        with: 
          node-version: 16.18.1

      - name: dependency install
        run: npm install

      - name: test
        run: npm run test-all

  lhci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './frontend'
    outputs:
      status: ${{ job.status }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: nodeJS
        uses: actions/setup-node@v3
        with: 
          node-version: 16.18.1
        
      - name: dependency install
        run: |
          npm install
      
      - name: Build
        run: |
          npm run build
      
      - name: lighthouse
        run: | 
          npm install -g @lhci/cli
          lhci autorun || echo "Fail to Run Lighthouse CI"

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync("./frontend/lhci_reports/manifest.json"));
            let comments = "";

            results.forEach((result, idx) => {
              const { summary, jsonPath } = result;
              const details = JSON.parse(fs.readFileSync(jsonPath));
              const { audits } = details;
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report ${idx + 1}!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                `| ${score(summary.accessibility)} Accessbility | ${summary.accessibility} |`,
                `| ${score(summary.seo)} SEO | ${summary.seo} |`,
                `| ${score(summary.pwa)} PWA | ${summary.pwa} |`,
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits["largest-contentful-paint"].score * 100
                )} Largest Contentful Paint | ${
                  audits["largest-contentful-paint"].displayValue
                } |`,
                `| ${score(
                  audits["first-contentful-paint"].score * 100
                )} First Contentful Paint | ${
                  audits["first-contentful-paint"].displayValue
                } |`,
                `| ${score(
                  audits["speed-index"].score * 100
                )} Speed Index | ${
                  audits["speed-index"].displayValue
                } |`,
                `| ${score(
                  audits["total-blocking-time"].score * 100
                )} Total Blocking Time | ${
                  audits["total-blocking-time"].displayValue
                } |`,
                `| ${score(
                  audits["interactive"].score * 100
                )} Time To Interactive | ${
                  audits["interactive"].displayValue
                } |`,
                `| ${score(
                  audits["cumulative-layout-shift"].score * 100
                )} Cumulative Layout Shift | ${
                  audits["cumulative-layout-shift"].displayValue
                } |`,
              ].join("\n");
              comments += comment + "\n" + "\n" + detail + "\n" + "\n";
            });
            core.setOutput('comments', comments)

      - name: comment PR
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments }}

  slack-notifications:
    needs: [CI, docker, lhci]
    if: ${{ always() }}
    uses: ./.github/workflows/slack-notification.yml
    with:
      title: ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏö© CI
      status: 'CI : ${{ needs.CI.outputs.status }} && docker : ${{ needs.docker.outputs.status }} && lhci : ${{ needs.lhci.outputs.status }}'
      commit_url: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
    secrets:
      webhook_url: ${{ secrets.SLACK_NOTIFICATION_WEBHOOK_URL }}